/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;
import backend.Doctor;
import backend.DoctorDirectory;
import backend.Encounter;
import backend.EncounterHistory;
import backend.patient;
import backend.patientdirectory;
import java.time.LocalTime;
import java.util.Date;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author sej
 */
public class BookAppointment extends javax.swing.JFrame {

    /**
     * Creates new form BookAppointment
     */
     patientdirectory patientdirect;
     DoctorDirectory docdirect;
    EncounterHistory encounterdirect;
    private String username;
    String community;
    int docId;
    patient pat = new patient();
    
     
    public BookAppointment() {
         initComponents();
         if(encounterdirect == null){
            this.encounterdirect = new EncounterHistory();
        }
        else{
            this.encounterdirect = encounterdirect;
        }
        
        for(patient p:patientdirect.getpatientdirect()){
            if(username.equals(p.getEmailId())){
               pat= p;
                community = p.residence.getCommunityName();
                System.out.println(community);
            }
        }
        
        for(Doctor d:docdirect.getdocdirect()){
            if(community.equals(d.residence.getCommunityName())){
                docId = d.getDocId();
                System.out.println( docId);
            }
        }
       populateTableData(docId);
    }

   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bookappointmentHomeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bookappointmentLogoutBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookappointmentDoctorTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        bookappointmentPatientID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bookappointmentDoctorID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bookappointmentEncounterID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        bookappointmentBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        bookappointmentSearchDoctor = new javax.swing.JTextField();
        bookappointmenSelectDoctorBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookappointmentHomeBtn.setText("Home");
        bookappointmentHomeBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookappointmentHomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmentHomeBtnActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmentHomeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 25, 70, 34));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        jLabel1.setText("Book Appointment");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(427, 29, -1, -1));

        bookappointmentLogoutBtn.setText("Logout");
        bookappointmentLogoutBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookappointmentLogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmentLogoutBtnActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmentLogoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(932, 25, 70, 34));

        bookappointmentDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "Name ", "Contact", "Email ID", "Gender", "Age", "Hospital Name", "Qualifications", "Specialization", "Avaialble Slots"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookappointmentDoctorTable.setBackground(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(bookappointmentDoctorTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 95, 950, 226));

        jLabel2.setText("Patient ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 382, -1, -1));

        bookappointmentPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmentPatientIDActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmentPatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 379, 170, -1));

        jLabel3.setText("Doctor ID");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 420, -1, -1));
        jPanel1.add(bookappointmentDoctorID, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 420, -1, -1));

        jLabel4.setText("Encounter ID");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 461, -1, -1));
        jPanel1.add(bookappointmentEncounterID, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 461, -1, -1));

        jLabel5.setText("Date");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 507, -1, -1));

        bookappointmentBtn.setText("Book Appointment");
        bookappointmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmentBtnActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmentBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 638, 203, -1));

        jLabel6.setText("Time");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 548, -1, -1));
        jPanel1.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 507, -1, -1));
        jPanel1.add(timePicker1, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 548, -1, -1));

        bookappointmentSearchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmentSearchDoctorActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmentSearchDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 340, 130, -1));

        bookappointmenSelectDoctorBtn.setText("Select Doctor");
        bookappointmenSelectDoctorBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookappointmenSelectDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookappointmenSelectDoctorBtnActionPerformed(evt);
            }
        });
        jPanel1.add(bookappointmenSelectDoctorBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 340, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookappointmentHomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmentHomeBtnActionPerformed
        // TODO add your handling code here:

        PatientLoginForm patientHome = new PatientLoginForm();
        patientHome.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_bookappointmentHomeBtnActionPerformed

    private void bookappointmentLogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmentLogoutBtnActionPerformed
        // TODO add your handling code here:

        LoginFrame newLoginPage = new LoginFrame();
        newLoginPage.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_bookappointmentLogoutBtnActionPerformed

    private void bookappointmentPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmentPatientIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookappointmentPatientIDActionPerformed

    private void bookappointmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmentBtnActionPerformed
   System.out.println("***********");
        int i = bookappointmentDoctorTable.getSelectedRow();
        if (i<0){
            JOptionPane.showMessageDialog(this, "Please select a doctor to proceed.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) bookappointmentDoctorTable.getModel();
        Doctor dr = (Doctor) model.getValueAt(i, 1);
        int slots = 1;
        
        if(slots > 0){
            int patientId = pat.getPatientId();
            int drID = dr.getDocId();
            int encID = Integer.parseInt(bookappointmentEncounterID.getText());
            Date encDate = jDateChooser1.getDate();
            LocalTime time = timePicker1.getTime();
            
            Encounter enc = encounterdirect.addNewEncounter(encID, encDate, time,  patientId, docId);
            enc.setEncId(Integer.parseInt(bookappointmentEncounterID.getText()));
            enc.setEncDate(jDateChooser1.getDate());
            enc.patient.setPatientId(patientId);
            enc.doc.setDocId(docId);
            
            JOptionPane.showMessageDialog(this, "Appointment booked successfully");
//            dr.setSlotsAvailable((slots-1));
            
            bookappointmentEncounterID.setText(null);
            bookappointmentPatientID.setText(null);
            bookappointmentDoctorID.setText(null);
            jDateChooser1.setDate(null);
           timePicker1.setTime(null);
        }
        
        else{
            JOptionPane.showMessageDialog(this, "Selected doctor has 0 slots available. Please select another doctor");
        }
        

    }//GEN-LAST:event_bookappointmentBtnActionPerformed

    private void bookappointmentSearchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmentSearchDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookappointmentSearchDoctorActionPerformed

    private void bookappointmenSelectDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookappointmenSelectDoctorBtnActionPerformed
        // TODO add your handling code here:

        int i = bookappointmentDoctorTable.getSelectedRow();

        if (i<0){
            JOptionPane.showMessageDialog(this, "Please select a doctor to proceed.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) bookappointmentDoctorTable.getModel();
        Doctor dr = (Doctor) model.getValueAt(i, 1);

        int slots = 1;
        if(slots > 1){
            int patientId = pat.getPatientId();
            int doctorId = dr.getDocId();
            //            int drID = dr.getDoctorID();
            String uniqueEncounterID = UUID.randomUUID().toString();

            bookappointmentEncounterID.setText(uniqueEncounterID);
            bookappointmentPatientID.setText(String.valueOf(patientId));
            bookappointmentDoctorID.setText(String.valueOf(doctorId));

            bookappointmentEncounterID.setEditable(false);
            bookappointmentPatientID.setEditable(false);
            bookappointmentDoctorID.setEditable(false);

        }
        else{
            JOptionPane.showMessageDialog(this, "Selected doctor has 0 slots available. Please select another doctor");
        }

    }//GEN-LAST:event_bookappointmenSelectDoctorBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    private void populateTableData(int drID) {
        DefaultTableModel model = (DefaultTableModel) bookappointmentDoctorTable.getModel();
        
         TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
         bookappointmentDoctorTable.setRowSorter(sorter);
         model.setRowCount(0);
         
        for(Doctor p: docdirect.getdocdirect()){
            Object[] row = new Object[10];
            row[0] = p.getDocId();
            System.out.println("++++");
            System.out.println(row[0]);
            row[1] = p;
            row[2] = p.getContactNo();
            row[3] = p.getEmailId();
            row[4] = p.getGender();
            row[5] = p.getAge();
            row[6] = p.hospital.getHosName();
            row[7] = p.getDocQualifications();
            row[8] = p.getDocSpecialize();
//            row[9] = p.getSlotsAvailable();
             
            
            if(p.getDocId() == drID){
                model.addRow(row);
                System.out.println("hereeeeeeeee");
            }
        }
        bookappointmentSearchDoctor.getDocument().addDocumentListener(new DocumentListener() {
         @Override
         public void insertUpdate(DocumentEvent e) {
            search(bookappointmentSearchDoctor.getText());
         }
         @Override
         public void removeUpdate(DocumentEvent e) {
            search(bookappointmentSearchDoctor.getText());
         }
         @Override
         public void changedUpdate(DocumentEvent e) {
            search(bookappointmentSearchDoctor.getText());
         }
         public void search(String str) {
            if (str.length() == 0) {
               sorter.setRowFilter(null);
            } else {
               sorter.setRowFilter(RowFilter.regexFilter(str));
            }
         }
        });
    }


//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(BookAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(BookAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(BookAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(BookAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new BookAppointment().setVisible(true);
//            }
//        });
//}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookappointmenSelectDoctorBtn;
    private javax.swing.JButton bookappointmentBtn;
    private javax.swing.JTextField bookappointmentDoctorID;
    private javax.swing.JTable bookappointmentDoctorTable;
    private javax.swing.JTextField bookappointmentEncounterID;
    private javax.swing.JButton bookappointmentHomeBtn;
    private javax.swing.JButton bookappointmentLogoutBtn;
    private javax.swing.JTextField bookappointmentPatientID;
    private javax.swing.JTextField bookappointmentSearchDoctor;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    // End of variables declaration//GEN-END:variables

}